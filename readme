ECS(3)                 Library Functions Manual                 ECS(3)

NAME
     ecs - Entity Component System library

SYNOPSIS
     #include "ecs.h"

     void init(struct ECS* ecs);
     Ent create(struct ECS* ecs);
     void destroy(struct ECS* ecs, Ent ent);
     void add(struct ECS* ecs, Ent ent, CompType type, void* data, size_t size);
     void remove(struct ECS* ecs, Ent ent, CompType type);
     void* get(struct ECS* ecs, Ent ent, CompType type);

DESCRIPTION
     The ecs library provides a simple and efficient implementation
     of an Entity Component System (ECS) for managing entities and
     their associated components in a game or simulation.

     The ECS structure uses a free list to recycle destroyed entity
     slots and employs a Structure of Arrays (SoA) approach for
     better cache performance when accessing components.

DATA TYPES
     Ent          A unique identifier for an entity.
     CompType     A unique identifier for a component type.

STRUCTURES
     struct Comp {
         uint8_t data[MAX_COMPS][MAX_ENTS][MAX_COMP_SIZE];
     };

     struct ECS {
         Ent ents[MAX_ENTS];
         CompType types[MAX_ENTS][MAX_COMPS];
         struct Comp comps;
         size_t ent_count;
         Ent free_list[MAX_ENTS];
         size_t free_count;
     };

MACROS
     MAX_ENTS     The maximum number of entities (1024).
     MAX_COMPS    The maximum number of components per entity (32).
     MAX_COMP_SIZE The maximum size of a component in bytes (64).

FUNCTIONS
     void init(struct ECS* ecs);
         Initialize the ECS structure by setting the entity count to
         zero and clearing the entities, component types, and
         components arrays.

     Ent create(struct ECS* ecs);
         Create a new entity and return its identifier. If the maximum
         number of entities is reached, return (Ent)-1.

     void destroy(struct ECS* ecs, Ent ent);
         Destroy an entity by removing all its components and adding
         the entity to the free list for recycling.

     void add(struct ECS* ecs, Ent ent, CompType type, void* data, size_t size);
         Add a component of the specified type to the entity. If the
         component size exceeds MAX_COMP_SIZE, the function does
         nothing.

     void remove(struct ECS* ecs, Ent ent, CompType type);
         Remove the component of the specified type from the entity.

     void* get(struct ECS* ecs, Ent ent, CompType type);
         Retrieve a pointer to the data of the component of the
         specified type for the given entity. Return NULL if the
         component does not exist.

EXAMPLE
     #include "ecs.h"

     typedef struct {
         float x, y;
     } Position;

     typedef struct {
         float vx, vy;
     } Velocity;

     int main() {
         struct ECS ecs;
         init(&ecs);

         CompType POSITION = 1;
         CompType VELOCITY = 2;

         Ent ent = create(&ecs);

         Position pos = {10.0f, 20.0f};
         add(&ecs, ent, POSITION, &pos, sizeof(Position));

         Velocity vel = {1.0f, 1.5f};
         add(&ecs, ent, VELOCITY, &vel, sizeof(Velocity));

         Position* p = (Position*)get(&ecs, ent, POSITION);
         if (p) {
             printf("Position: x = %f, y = %f\n", p->x, p->y);
         }

         Velocity* v = (Velocity*)get(&ecs, ent, VELOCITY);
         if (v) {
             printf("Velocity: vx = %f, vy = %f\n", v->vx, v->vy);
         }

         remove(&ecs, ent, POSITION);

         p = (Position*)get(&ecs, ent, POSITION);
         if (!p) {
             printf("Position component removed\n");
         }

         destroy(&ecs, ent);

         return 0;
     }

SEE ALSO
     C programming language, data-oriented design, game development.

AUTHORS
     This ECS library was written following the style of Unix v5 and
     Dennis Ritchie with performance considerations.

BUGS
     No known bugs.


